name: Build Wheels (CUDA)

on:
  push:
    branches:
      - '*'
  pull_request:
    types: ['opened', 'reopened', 'synchronize']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build_wheels_linux:
    name: Build Wheel Linux ${{ matrix.pyver }} ${{ matrix.cuda }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        pyver: ["3.9", "3.10", "3.11", "3.12"]
        cuda: ["12.4.1"]
        releasetag: ["basic"]
    container:
      # https://github.com/actions/checkout/issues/1474#issuecomment-2604308106
      image: docker://quay.io/pypa/manylinux2014_x86_64
      volumes:
        # override /__e/node20 because GitHub Actions uses a version that requires too-recent glibc
        # see "Install node.js for GitHub Actions" below
        - /tmp:/__e/node20
    env:
      CUDAVER: ${{ matrix.cuda }}
      AVXVER: ${{ matrix.releasetag }}

    steps:
      - name: Install node.js for GitHub Actions
        run: |
          # apt-get install -y curl ca-certificates &&
          # Install a Node.js version that works in older Ubuntu containers (read: does not require very recent glibc)
          NODE_VERSION=v20.18.1 &&
          NODE_TAR_FILE=node-$NODE_VERSION-linux-x64-glibc-217.tar.gz &&
          NODE_URL=https://unofficial-builds.nodejs.org/download/release/$NODE_VERSION/$NODE_TAR_FILE &&
          curl -Lo /tmp/$NODE_TAR_FILE $NODE_URL &&
          tar -C /__e/node20 -x --strip-components=1 -f /tmp/$NODE_TAR_FILE

      - name: Install lsb-release
        run: |
          yum update
          yum install redhat-lsb

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}
          cache: 'pip'

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v3.1.0
        with:
          activate-environment: "llamacpp"
          python-version: ${{ matrix.pyver }}
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: Install Dependencies
        env:
          MAMBA_DOWNLOAD_FAILFAST: "0"
          MAMBA_NO_LOW_SPEED_LIMIT: "1"
        run: |
          python -c "import os; print(os.uname())"
          mamba install -y 'cuda' -c nvidia/label/cuda-$CUDAVER
          python -m pip install build wheel auditwheel delvewheel
          python -m pip install -r requirements.txt

      - name: Build Wheel
        run: |
          cudaVersion = "${CUDAVER%.*}"
          XLLAMACPP_BUILD_CUDA = 1
          VERSIONEER_CLOSEST_TAG_ONLY = 1
          CUDA_PATH = $CONDA_PREFIX
          CUDA_HOME = $CONDA_PREFIX
          CUDA_TOOLKIT_ROOT_DIR = $CONDA_PREFIX
          LD_LIBRARY_PATH = $CONDA_PREFIX + '/lib:' + $LD_LIBRARY_PATH
          VERBOSE = '1'
          CMAKE_ARGS = '-DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES=all'
          CMAKE_ARGS = "-DGGML_CUDA_FORCE_MMQ=ON $CMAKE_ARGS"
          CMAKE_ARGS = "$CMAKE_ARGS -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off"
          make
          python -m build --wheel
          auditwheel repair --exclude libcuda.so.1 dist/*.whl -w dist
          rm dist/*-linux_x86_64.whl
          # write the build tag to the output
          Write-Output "CUDA_VERSION=$cudaVersion" >> $env:GITHUB_ENV

      - uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        with:
          files: dist/*
          # Set tag_name to <tag>-cu<cuda_version>
          tag_name: ${{ github.ref_name }}-cu${{ env.CUDA_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build_wheels_windows:
  #   name: Build Wheel ${{ matrix.os[0] }} ${{ matrix.pyver }} ${{ matrix.cuda }} ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
  #   runs-on: ${{ matrix.os[0] }}
  #   strategy:
  #     matrix:
  #       os: [["ubuntu-22.04", "docker://quay.io/pypa/manylinux2014_x86_64"], ["windows-2019", null]]
  #       pyver: ["3.9", "3.10", "3.11", "3.12"]
  #       cuda: [12.4.1"]
  #       releasetag: ["basic"]
  #   defaults:
  #     run:
  #       shell: pwsh
  #   container: ${{ matrix.os[1] }}
  #   env:
  #     CUDAVER: ${{ matrix.cuda }}
  #     AVXVER: ${{ matrix.releasetag }}

  #   steps:
  #     - name: Add MSBuild to PATH
  #       if: runner.os == 'Windows'
  #       uses: microsoft/setup-msbuild@v2
  #       with:
  #         vs-version: '[16.11,16.12)'

  #     - name: Install node.js for GitHub Actions
  #       if: runner.os != 'Windows'
  #       env:
  #         NODE_VERSION: v20.18.1
  #         NODE_TAR_FILE: node-$NODE_VERSION-linux-x64-glibc-217.tar.gz
  #       run: |
  #         apt-get install -y curl ca-certificates
  #         # Install a Node.js version that works in older Ubuntu containers (read: does not require very recent glibc)
  #         curl -Lo /tmp/$NODE_TAR_FILE https://unofficial-builds.nodejs.org/download/release/$NODE_VERSION/$NODE_TAR_FILE
  #         tar -C /__e/node20 -x --strip-components=1 -f /tmp/$NODE_TAR_FILE

  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: "recursive"

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.pyver }}
  #         cache: 'pip'

  #     - name: Setup Mamba
  #       uses: conda-incubator/setup-miniconda@v3.1.0
  #       with:
  #         activate-environment: "llamacpp"
  #         python-version: ${{ matrix.pyver }}
  #         miniforge-version: latest
  #         add-pip-as-python-dependency: true
  #         auto-activate-base: false

  #     - name: VS Integration Cache
  #       id: vs-integration-cache
  #       if: runner.os == 'Windows'
  #       uses: actions/cache@v4
  #       with:
  #         path: ./MSBuildExtensions
  #         key: cuda-${{ matrix.cuda }}-vs-integration

  #     - name: Get Visual Studio Integration
  #       if: runner.os == 'Windows' && steps.vs-integration-cache.outputs.cache-hit != 'true'
  #       run: |
  #         if ($env:CUDAVER -eq '12.1.1') {$x = '12.1.0'} else {$x = $env:CUDAVER}
  #         $links = (Invoke-RestMethod 'https://raw.githubusercontent.com/Jimver/cuda-toolkit/master/src/links/windows-links.ts').Trim().split().where({$_ -ne ''})
  #         for ($i=$q=0;$i -lt $links.count -and $q -lt 2;$i++) {if ($links[$i] -eq "'$x',") {$q++}}
  #         Invoke-RestMethod $links[$i].Trim("'") -OutFile 'cudainstaller.zip'
  #         & 'C:\Program Files\7-Zip\7z.exe' e cudainstaller.zip -oMSBuildExtensions -r *\MSBuildExtensions\* > $null
  #         Remove-Item 'cudainstaller.zip'

  #     - name: Install Visual Studio Integration
  #       if: runner.os == 'Windows'
  #       run: |
  #         $y = (gi '.\MSBuildExtensions').fullname + '\*'
  #         (gi 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\*\BuildCustomizations').fullname.foreach({cp $y $_})
  #         $cupath = 'CUDA_PATH_V' + $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','_')
  #         echo "$cupath=$env:CONDA_PREFIX" >> $env:GITHUB_ENV

  #     - name: Install Dependencies
  #       env:
  #         MAMBA_DOWNLOAD_FAILFAST: "0"
  #         MAMBA_NO_LOW_SPEED_LIMIT: "1"
  #       run: |
  #         $cudaVersion = $env:CUDAVER
  #         python -c "import os; print(os.uname())"
  #         mamba install -y 'cuda' -c nvidia/label/cuda-$cudaVersion
  #         python -m pip install build wheel auditwheel delvewheel
  #         python -m pip install -r requirements.txt

  #     - name: Build Wheel
  #       run: |
  #         $cudaVersion = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
  #         $env:XLLAMACPP_BUILD_CUDA = 1
  #         $env:VERSIONEER_CLOSEST_TAG_ONLY = 1
  #         $env:CUDA_PATH = $env:CONDA_PREFIX
  #         $env:CUDA_HOME = $env:CONDA_PREFIX
  #         $env:CUDA_TOOLKIT_ROOT_DIR = $env:CONDA_PREFIX
  #         if ($IsLinux) {
  #           $env:LD_LIBRARY_PATH = $env:CONDA_PREFIX + '/lib:' + $env:LD_LIBRARY_PATH
  #         }
  #         $env:VERBOSE = '1'
  #         $env:CMAKE_ARGS = '-DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES=all'
  #         $env:CMAKE_ARGS = "-DGGML_CUDA_FORCE_MMQ=ON $env:CMAKE_ARGS"
  #         # if ($env:AVXVER -eq 'AVX') {
  #         $env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'
  #         # }
  #         # if ($env:AVXVER -eq 'AVX512') {
  #         #  $env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX512=on'
  #         # }
  #         # if ($env:AVXVER -eq 'basic') {
  #         #  $env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX=off -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'
  #         # }
  #         # Change project name
  #         # sed -i 's/name = "xllamacpp"/name = "xllamacpp-cuda12x"/g' pyproject.toml
  #         dir env:
  #         make
  #         python -m build --wheel
  #         if ($IsLinux) {
  #           auditwheel repair --exclude libcuda.so.1 dist/*.whl -w dist
  #           rm dist/*-linux_x86_64.whl
  #         } else {
  #           delvewheel repair --exclude nvcuda.dll dist/*.whl -w dist
  #         }
  #         # write the build tag to the output
  #         Write-Output "CUDA_VERSION=$cudaVersion" >> $env:GITHUB_ENV

  #     - uses: softprops/action-gh-release@v2
  #       if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
  #       with:
  #         files: dist/*
  #         # Set tag_name to <tag>-cu<cuda_version>
  #         tag_name: ${{ github.ref_name }}-cu${{ env.CUDA_VERSION }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
