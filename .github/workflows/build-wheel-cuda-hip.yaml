name: Build Wheels (CUDA & HIP)

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

# on:
#   push:
#     branches:
#       - '*'
#   pull_request:
#     types: ['opened', 'reopened', 'synchronize']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build_wheels_hip_linux:
    name: Build Wheel HIP Linux ${{ matrix.pyver }} ${{matrix.hip}}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        pyver: ["3.9", "3.10", "3.11", "3.12"]
        hip: ["6.3.4"]
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set up Python ${{ matrix.pyver }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}

      - name: Start ROCm container
        run: |
          # Get Python location from setup-python
          PYTHON_PATH=$(which python)
          PYTHON_HOME=$(dirname $(dirname $PYTHON_PATH))
          
          # Start the container with Python from host mounted
          docker run -d \
            --name rocm-container \
            -v ${{ github.workspace }}:/workspace \
            -v $PYTHON_HOME:$PYTHON_HOME \
            -e PATH=$PYTHON_HOME/bin:$PATH \
            -w /workspace \
            rocm/dev-ubuntu-22.04:${{ matrix.hip }} \
            sleep infinity
          
          # Verify Python installation in container
          docker exec rocm-container python --version
          docker exec rocm-container pip --version

      - name: System Dependencies
        run: |
          docker exec rocm-container bash -c '
            df -ha
            apt-get update
            apt-get install -y build-essential git cmake libcurl4-openssl-dev patchelf rocblas-dev hipblas-dev rocwmma-dev
            apt-get clean
            df -ha
            hipconfig --full
            ls -alh /opt/rocm/lib
          '

      - name: Setup Python environment
        run: |
          docker exec rocm-container bash -c '
            python -m pip install --upgrade pip
            python -m pip install build wheel auditwheel
            python -m pip install -r requirements.txt
          '

      - name: Build with native CMake HIP support
        env:
          XLLAMACPP_BUILD_HIP: "1"
          VERSIONEER_CLOSEST_TAG_ONLY: "1"
          VERBOSE: "1"
        run: |
          docker exec -e XLLAMACPP_BUILD_HIP=$XLLAMACPP_BUILD_HIP \
                     -e VERSIONEER_CLOSEST_TAG_ONLY=$VERSIONEER_CLOSEST_TAG_ONLY \
                     -e VERBOSE=$VERBOSE \
                     rocm-container bash -c '
            python --version
            printenv
            git config --global --add safe.directory "*"
            make
            python -m build --wheel
            df -ha
            echo "Clean up"
            rm -rf build
            rm -rf thirdparty
            df -ha
            auditwheel show dist/*.whl
            auditwheel repair --plat manylinux_2_35_x86_64 dist/*.whl -w dist
            rm dist/*-linux_x86_64.whl
            ls -alh dist
          '

      - name: Stop ROCm container and verify wheel files
        if: always()
        run: |
          # Always stop and remove the container
          docker stop rocm-container || true
          docker rm rocm-container || true
          
          # Check if any wheel files exist in the dist directory
          if [ -z "$(ls -A dist/*.whl 2>/dev/null)" ]; then
            echo "❌ No wheel files found in dist directory!"
            echo "Current directory contents:"
            ls -la dist/ 2>/dev/null || echo "No dist directory found"
            exit 1
          fi
          
          echo "✅ Wheel files found in dist directory"

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: artifacts
      #     path: ./dist/*.whl

      - uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}-rocm-${{matrix.hip}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build_wheels_cuda_linux:
    name: Build Wheel CUDA Linux ${{ matrix.platform }} ${{ matrix.pyver }} ${{ matrix.cuda }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: ["ubuntu-22.04", "ubuntu-22.04-arm"]
        pyver: ["3.9", "3.10", "3.11", "3.12"]
        cuda: ["12.4.1", "12.8.1"]
    env:
      CUDAVER: ${{ matrix.cuda }}

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}
          cache: 'pip'

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v3.1.1
        with:
          activate-environment: "llamacpp"
          python-version: ${{ matrix.pyver }}
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: Install Dependencies
        env:
          MAMBA_DOWNLOAD_FAILFAST: "0"
          MAMBA_NO_LOW_SPEED_LIMIT: "1"
        run: |
          # Echo glibc version
          ldd --version

          # First install basic build tools
          sudo apt-get update
          sudo apt-get install -y build-essential
          
          # Initialize conda for shell
          source $CONDA/etc/profile.d/conda.sh
          
          # Activate the conda environment
          conda activate llamacpp
          
          echo "CONDA_PREFIX after activation: $CONDA_PREFIX"
          
          # Try different CUDA package names and channels
          echo "Attempting to install CUDA ${{ matrix.cuda }}..."
          
          # First try with cuda-toolkit
          conda install -y -c nvidia/label/cuda-${{ matrix.cuda }} \
             cuda-toolkit cudnn cuda-nvcc
          echo "Successfully installed CUDA ${{ matrix.cuda }} using cuda-toolkit package"
          
          # Verify CONDA_PREFIX is set
          if [ -z "$CONDA_PREFIX" ]; then
            echo "ERROR: CONDA_PREFIX is not set after conda activation"
            exit 1
          fi
          
          # Install build dependencies
          python -m pip install build wheel auditwheel
          python -m pip install -r requirements.txt
          
          # Verify CUDA installation
          echo "=== CUDA Installation Check ==="
          echo "CONDA_PREFIX: $CONDA_PREFIX"
          echo "=== CUDA Files in CONDA_PREFIX ==="
          find $CONDA_PREFIX -name "*cuda*" -o -name "*nvcc*" | sort
          echo "=== NVCC Version ==="
          which nvcc || echo "nvcc not found in PATH"
          nvcc --version || echo "nvcc version check failed"
          
          # Set CUDA environment variables
          echo "=== Setting CUDA Environment Variables ==="
          export CUDA_HOME=$CONDA_PREFIX
          export CUDA_PATH=$CONDA_PREFIX
          export CUDA_TOOLKIT_ROOT_DIR=$CONDA_PREFIX
          export LD_LIBRARY_PATH="$CONDA_PREFIX/lib:$LD_LIBRARY_PATH"
          export PATH="$CONDA_PREFIX/bin:$PATH"
          
          # Save to GITHUB_ENV for subsequent steps
          echo "CUDA_HOME=$CUDA_HOME" >> $GITHUB_ENV
          echo "CUDA_PATH=$CUDA_PATH" >> $GITHUB_ENV
          echo "CUDA_TOOLKIT_ROOT_DIR=$CUDA_TOOLKIT_ROOT_DIR" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Build Wheel
        run: |
          # Echo glibc version
          ldd --version

          # Initialize conda for shell
          source $CONDA/etc/profile.d/conda.sh
          conda activate llamacpp
          
          echo "=== Build Environment ==="
          echo "System: ${{ matrix.platform }}"
          echo "Python: $(which python)"
          echo "Pip: $(which pip)"
          pip list
          echo "CUDA_HOME: $CUDA_HOME"
          echo "PATH: $PATH"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "CONDA_PREFIX: $CONDA_PREFIX"
          which nvcc
          nvcc --version
          
          # Set build environment
          cuda_version=${CUDAVER//./}
          cuda_version=${cuda_version:0:${#cuda_version}-1}
          
          # Export build variables
          export XLLAMACPP_BUILD_CUDA=1
          export VERSIONEER_CLOSEST_TAG_ONLY=1
          export VERBOSE=1
          export CMAKE_ARGS="-DGGML_CUDA=on \
            -DCMAKE_CUDA_ARCHITECTURES=all \
            -DGGML_CUDA_FORCE_MMQ=ON \
            -DGGML_AVX2=off \
            -DGGML_FMA=off \
            -DGGML_F16C=off \
            -DCUDAToolkit_ROOT=$CONDA_PREFIX \
            -DCMAKE_CUDA_COMPILER=$CONDA_PREFIX/bin/nvcc"
          
          echo "=== CMake Configuration ==="
          echo "CMAKE_ARGS: $CMAKE_ARGS"
          
          make
          python -m build --wheel

          auditwheel show dist/*.whl
          
          if [ "${{ matrix.platform }}" = "ubuntu-22.04-arm" ]; then
            auditwheel repair --plat manylinux_2_39_aarch64 --exclude libcuda.so.1 dist/*.whl -w dist
            rm -f dist/*-linux_aarch64.whl
          else
            auditwheel repair --plat manylinux_2_39_x86_64 --exclude libcuda.so.1 dist/*.whl -w dist
            rm -f dist/*-linux_x86_64.whl
          fi
          
          echo "CUDA_VERSION=$cuda_version" >> $GITHUB_ENV

      - uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}-cu${{ env.CUDA_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_wheels_cuda_windows:
    name: Build Wheel CUDA Windows ${{ matrix.pyver }} ${{ matrix.cuda }}
    runs-on: windows-2019
    strategy:
      matrix:
        pyver: ["3.9", "3.10", "3.11", "3.12"]
        cuda: ["12.4.1", "12.8.1"]
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}
          cache: 'pip'

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel delvewheel

      - name: Download and install win64devkit
        run: |
          curl -L https://github.com/skeeto/w64devkit/releases/download/v1.22.0/w64devkit-1.22.0.zip --output w64devkit.zip
          Expand-Archive w64devkit.zip -DestinationPath .

      - name: Add w64devkit to PATH
        run: |
          echo "$(Get-Location)\w64devkit\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Setup CUDA
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          use-github-cache: false
          cuda: ${{ matrix.cuda }}

      - name: Build Wheel
        run: |
          $cudaVersion = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
          $env:XLLAMACPP_BUILD_CUDA = 1
          $env:VERSIONEER_CLOSEST_TAG_ONLY = 1
          $env:CMAKE_ARGS = '-DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES=all -DGGML_CUDA_FORCE_MMQ=ON -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'
          
          make
          python -m build --wheel
          delvewheel repair --exclude nvcuda.dll dist/*.whl -w dist
          
          Write-Output "CUDA_VERSION=$cudaVersion" >> $env:GITHUB_ENV

      - uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}-cu${{ env.CUDA_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
